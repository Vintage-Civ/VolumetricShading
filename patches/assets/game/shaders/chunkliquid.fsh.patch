--- a/assets/game/shaders/chunkliquid.fsh
+++ b/assets/game/shaders/chunkliquid.fsh
@@ -1,4 +1,4 @@
-#version 330 core
+ï»¿#version 330 core
 
 uniform sampler2D terrainTex;
 uniform sampler2D depthTex;
@@ -26,6 +26,7 @@
 in vec3 fragNormal;
 flat in int skyExposed;
 
+
 in vec2 flowVectorf;
 in float glowLevel;
 
@@ -56,8 +57,8 @@
     
     vec2 p = floor(x);
     vec2 f = fract(x);
-    
-		
+
+
 	float va = 0.0;
     for( int j=-1; j<=1; j++ )
     for( int i=-1; i<=1; i++ )
@@ -69,8 +70,8 @@
         
         float a = max(cos(d - waterWaveCounter * 2.7 + (o.x + o.y) * 5.0), 0.);
         a = smoothstep(0.99, 0.999, a);
-        
-	    float ripple = mix(a, 0., d);
+
+		float ripple = mix(a, 0., d);
         va += max(ripple, 0.);
     }
 	
@@ -91,7 +92,9 @@
     // Make sure to use the red channel (and GL_RED target in your texture)
     outReveal.r = color.a; // Was *1.2 but that made lava more transparent :o
 	
-    outGlow = vec4(glowLevel, 0, 0, color.a);
+	float scatterAmt = calculateVolumetricScatter(fWorldPos);
+	
+    outGlow = vec4(glowLevel, scatterAmt, 0, color.a);
 }
 
 void main() 
@@ -164,7 +167,7 @@
 			float intensity = clamp(dot(fragNormal, vec3(0, 1, 0)), 0, 1) * 0.5;
 			float a = fragWorldPos.x + fragWorldPos.y - 1.5 * flowVectorf.x * waterFlowCounter;
 			float b = fragWorldPos.z - 1.5 * flowVectorf.y * waterFlowCounter;
-			
+
 			float diff = intensity * clamp(1 - diffTotal*1000 - gnoise(vec3(a*35, b*35, waterFlowCounter))/2 + gnoise(vec3(a*2, b*2, waterFlowCounter))/2, 0, 1);
 			float noise = intensity * (gnoise(vec3(a, b, waterFlowCounter)) + 0.5) / 2;
 			texColor.rgb -= vec3(2*bright*(diff * 0.3 + noise/10))/2;
@@ -172,18 +175,18 @@
 			
 		} else {
 			// Cold liquids
-			
+
 			// Foam
 			float intensity = clamp(dot(fragNormal, vec3(0, 1, 0)), 0, 1);
 			float a = fragWorldPos.x + fragWorldPos.y - 1.5 * flowVectorf.x * waterFlowCounter;
 			float b = fragWorldPos.z - 1.5 * flowVectorf.y * waterFlowCounter;
-			
+
 			float noise1 = gnoise(vec3(a*35, b*35, waterFlowCounter));
 			float noise2 = gnoise(vec3(a*2, b*2, waterFlowCounter));
-			
+
 			float diff = intensity * clamp(1 - diffTotal*1500 - noise1/2 + noise2/2, 0, 1);
 			float noise = intensity * (gnoise(vec3(a * 0.4, b * 0.4, waterFlowCounter))/2 + gnoise(vec3(a, b, waterFlowCounter))/2 + 0.5) / 2;
-			
+
 			if (doLightFoam) {
 				texColor.rgb += vec3(max(0, 2*bright*(diff * 0.3 + noise/10))) / 4;
 			} else {
@@ -191,52 +194,21 @@
 			}
 			
 			texColor.a += max(0, diff/16 + noise/4);
-			
+#if VSMOD_SSR > 0
+			texColor.a *= VSMOD_SSR_WATER_TRANSPARENCY;
+#endif
 			
 			// Droplet noise
 			float f = 0;
 			if (skyExposed > 0) {
 				vec2 uv = 12.0 * fragWorldPos.xz / (2.0 + noise1/5000.0 + noise/600.0);
 				f = dropletnoise(uv);
+#if VSMOD_SSR > 0
+				f *= VSMOD_SSR_SPLASH_TRANSPARENCY;
+#endif
 			}
-			
-			
-			
-			// Specular reflection
-			if (skyExposed > 0) {
-				vec3 noisepos = vec3(fragWorldPos.x , fragWorldPos.z, waterWaveCounter / 8 + windWaveCounter / 6);
-				
-				//float dy = clamp(noise2 / 10, 0, 1) + gnoise(noisepos); - trippy specular rings
-				
-				float dy = noise2 / 20 + clamp(gnoise(noisepos) / 10, 0, 0.6);
-				
-				vec3 normal = normalize(vec3(dy, 1, -dy));
-				
-				float upness = max(0, dot(fragNormal, vec3(0,1,0))); // Only do specular reflections on up faces
-				
-				vec3 eye = normalize(vec3(fWorldPos.x, fWorldPos.y - 2, fWorldPos.z));
-				vec3 reflectionVec = reflect(sunPosRel, normal);
-				float p = dot(reflectionVec, eye);
-				if (p > 0) {
-					float sunb = clamp(sunPosRel.y * 10, 0, 1) * clamp(1.5 - sunPosRel.y, 0, 1) * sunSpecularIntensity;
-					
-					float specular = pow(p, 200) * sunb;
-					
-					#if SHADOWQUALITY > 0
-					float weight = upness * clamp(specular * clamp(pow(shadowBright, 4), 0, 1) * clamp(1.5 * shadowIntensity, 0, 1), 0, 1);
-					#else
-					float weight = upness * clamp(specular * clamp(pow(shadowBright, 4), 0, 1) * clamp(1.5, 0, 1), 0, 1);
-					#endif
-					
-					vec3 sunColf = applyFog(vec4(sunColor, 1), fogAmount).rgb;
-					
-					texColor.rgb = mix(texColor.rgb, sunColf + noise1 * 0.2, weight);
-					texColor.a = mix(texColor.a, texColor.a + specular/2, weight);
-				}
-			}
-			
+
 			texColor.rgb *= 1 + f;
-			
 		}
 	}
 	
@@ -246,4 +218,4 @@
 	
 	
 	drawPixel(texColor);
-}
\ No newline at end of file
+}
